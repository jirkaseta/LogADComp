"""
Extract times from the log files generated by the orchestrator runs.

Author: Ondřej Sedláček <xsedla1o@stud.fit.vutbr.cz>
"""

import argparse
import re
from pathlib import Path
from typing import Union

import pandas as pd

pd.options.display.max_columns = None
pd.options.display.max_rows = None
pd.options.display.width = None


duration_pattern = re.compile(
    r"""
    ^\s*
    (?:(?P<hours>[\d.]+)h)?       # optional hours
    \s*
    (?:(?P<minutes>[\d.]+)m)?     # optional minutes
    \s*
    (?:(?P<seconds>[\d.]+)s)?     # optional seconds
    \s*$
    """,
    re.VERBOSE,
)


def parse_duration(s: str) -> float:
    """
    Parse a single duration string into total seconds.
    e.g. "1.5h 2m 3.2s" -> 1.5*3600 + 2*60 + 3.2
    """
    m = duration_pattern.match(s)
    if not m:
        raise ValueError(f"Invalid duration format: {s!r}")
    hours = float(m.group("hours")) if m.group("hours") else 0.0
    minutes = float(m.group("minutes")) if m.group("minutes") else 0.0
    seconds = float(m.group("seconds")) if m.group("seconds") else 0.0
    return hours * 3600 + minutes * 60 + seconds


def get_times(filepath: Union[str, Path]):
    """
    Get the times from a file.
    """
    rows = []
    gpu_model = None
    gpu_stats = False
    gpu_name = False

    with open(filepath, "r") as f:
        row = {"Fit": None, "Predict": [], "Optimize": None}
        for line in f:
            line = line.strip()
            if gpu_stats or line.startswith("| NVIDIA-SMI"):
                if gpu_name:
                    # |   0  NVIDIA GeForce GTX 1080 Ti     On  |   ...
                    line = line.split("0", maxsplit=1)[-1]
                    line = line.split("On", maxsplit=1)[0]
                    gpu_model = line.strip().split(" ", maxsplit=1)[-1]
                    gpu_name = False
                    gpu_stats = False
                    continue
                gpu_stats = True
                if line.startswith("|=================="):
                    gpu_name = True
                    continue
            elif line.startswith("Fit model"):
                if row["Fit"] is not None:
                    row["Predict"] = sum(row["Predict"])
                    row["GPU"] = gpu_model
                    rows.append(row)
                    row = {"Fit": None, "Predict": [], "Optimize": None}
                timestr = line.split(": ", maxsplit=1)[-1]
                row["Fit"] = parse_duration(timestr)

            elif (
                line.startswith("Train validation")
                or line.startswith("Validation validation")
                or line.startswith("Test validation")
            ):
                if len(row["Predict"]) > 2:
                    row["Predict"] = sum(row["Predict"])
                    row["GPU"] = gpu_model
                    rows.append(row)
                    row = {"Fit": None, "Predict": [], "Optimize": None}
                timestr = line.split(": ", maxsplit=1)[-1]
                row["Predict"].append(parse_duration(timestr))

            elif line.startswith("Optimize"):
                if row["Optimize"] is not None:
                    row["Predict"] = sum(row["Predict"])
                    row["GPU"] = gpu_model
                    rows.append(row)
                    row = {"Fit": None, "Predict": [], "Optimize": None}
                timestr = line.split(": ", maxsplit=1)[-1]
                row["Optimize"] = parse_duration(timestr)

            elif line.startswith("DataPaths") and rows:
                row["Predict"] = sum(row["Predict"])
                row["GPU"] = gpu_model
                rows.append(row)
                row = {"Fit": None, "Predict": [], "Optimize": None}
                df = pd.DataFrame(rows).fillna(0)
                yield df
                rows = []

    if rows:
        row["Predict"] = sum(row["Predict"])
        row["GPU"] = gpu_model
        rows.append(row)
        df = pd.DataFrame(rows).fillna(0)
        yield df


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "file",
        type=str,
        help="Log files to plot",
        nargs="+",
    )
    parser.add_argument(
        "out_dir",
        type=str,
        help="Output directory for extracted times",
    )
    args = parser.parse_args()
    out = Path(args.out_dir)
    if not out.exists():
        out.mkdir(parents=True, exist_ok=True)
    out = out.resolve()

    short_names = ["SVM", "PCA", "SemPCA", "LogCluster"]

    for file in args.file:
        fp = Path(file)
        if not fp.exists():
            print(f"File {fp} does not exist")
            continue

        name = fp.stem.split("-")[1]
        i = 0
        for times in get_times(fp):
            if times.empty:
                continue

            stem = short_names[i] if name == "Short" else name
            out_path = out / f"{stem}_{i}.csv"
            if out_path.exists():
                prev_times = pd.read_csv(out_path)
                times = pd.concat([prev_times, times])
                times = times.drop_duplicates()
            i += 1
            times.to_csv(out_path, index=False)
